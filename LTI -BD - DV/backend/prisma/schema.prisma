// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  employees Employee[]
  positions Position[]
}

model Employee {
  id         Int       @id @default(autoincrement())
  companyId  Int
  name       String    @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  role       String    @db.VarChar(255)
  isActive   Boolean
  interviews Interview[]

  company Company @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model EmploymentType {
  id       Int       @id @default(autoincrement())
  typeName String    @db.VarChar(255)
  positions Position[]
}

model PositionStatus {
  id         Int       @id @default(autoincrement())
  statusName String    @db.VarChar(255)
  positions  Position[]
}

model Position {
  id                 Int              @id @default(autoincrement())
  companyId          Int
  interviewFlowId    Int
  title              String           @db.VarChar(255)
  description        String?
  statusId           Int
  isVisible          Boolean
  location           String           @db.VarChar(255)
  jobDescription     String?
  requirements       String?
  responsibilities   String?
  salaryMin          Float
  salaryMax          Float
  employmentTypeId   Int
  benefits           String?
  companyDescription String?
  applicationDeadline DateTime
  contactInfo        String           @db.VarChar(255)
  applications       Application[]

  company         Company        @relation(fields: [companyId], references: [id])
  interviewFlow   InterviewFlow  @relation(fields: [interviewFlowId], references: [id])
  status          PositionStatus @relation(fields: [statusId], references: [id])
  employmentType  EmploymentType @relation(fields: [employmentTypeId], references: [id])

  @@index([companyId])
  @@index([interviewFlowId])
  @@index([statusId])
  @@index([employmentTypeId])
}

model InterviewFlow {
  id            Int            @id @default(autoincrement())
  description   String         @db.VarChar(255)
  positions     Position[]
  interviewSteps InterviewStep[]

  @@index([id])
}

model InterviewStep {
  id              Int             @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String          @db.VarChar(255)
  orderIndex      Int
  interviews      Interview[]

  interviewFlow InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewType InterviewType @relation(fields: [interviewTypeId], references: [id])

  @@index([interviewFlowId])
  @@index([interviewTypeId])
}

model InterviewType {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String?
  interviewSteps InterviewStep[]
}

model Candidate {
  id              Int              @id @default(autoincrement())
  firstName       String           @db.VarChar(100)
  lastName        String           @db.VarChar(100)
  email           String           @unique @db.VarChar(255)
  phone           String?          @db.VarChar(15)
  address         String?          @db.VarChar(100)
  educations      Education[]
  workExperiences WorkExperience[]
  resumes         Resume[]
  applications    Application[]

  @@index([email])
}

model Education {
  id           Int       @id @default(autoincrement())
  institution  String    @db.VarChar(100)
  title        String    @db.VarChar(250)
  startDate    DateTime
  endDate      DateTime?
  candidateId  Int

  candidate Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}

model WorkExperience {
  id           Int       @id @default(autoincrement())
  company      String    @db.VarChar(100)
  position     String    @db.VarChar(100)
  description  String?   @db.VarChar(200)
  startDate    DateTime
  endDate      DateTime?
  candidateId  Int

  candidate Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}

model Resume {
  id           Int       @id @default(autoincrement())
  filePath     String    @db.VarChar(500)
  fileType     String    @db.VarChar(50)
  uploadDate   DateTime
  candidateId  Int

  candidate Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}

model Application {
  id            Int        @id @default(autoincrement())
  positionId    Int
  candidateId   Int
  applicationDate DateTime
  status        String     @db.VarChar(255)
  notes         String?
  interviews    Interview[]

  position   Position   @relation(fields: [positionId], references: [id])
  candidate  Candidate  @relation(fields: [candidateId], references: [id])

  @@index([positionId])
  @@index([candidateId])
}

model Interview {
  id             Int       @id @default(autoincrement())
  applicationId  Int
  interviewStepId Int
  employeeId     Int
  interviewDate  DateTime
  result         String    @db.VarChar(255)
  score          Int
  notes          String?

  application  Application  @relation(fields: [applicationId], references: [id])
  interviewStep InterviewStep @relation(fields: [interviewStepId], references: [id])
  employee     Employee     @relation(fields: [employeeId], references: [id])

  @@index([applicationId])
  @@index([interviewStepId])
  @@index([employeeId])
}

