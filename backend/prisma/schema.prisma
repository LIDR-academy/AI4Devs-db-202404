// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  positions Position[]
  employees Person[]
}

model Person {
  id              Int              @id @default(autoincrement())
  firstName       String           @db.VarChar(100)
  lastName        String           @db.VarChar(100)
  isActive        Boolean
  companyId       Int
  company         Company          @relation(fields: [companyId], references: [id])
  role            Role             @relation(fields: [roleId], references: [id])
  roleId          Int
  applications    Application[]
  interviews      Interview[]
  educations      Education[]
  workExperiences WorkExperience[]
  resumes         Resume[]
  contactInfo     ContactInfo?

  @@index([companyId])
  @@index([roleId])
}

model Role {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(100)
  persons Person[]
}

model Position {
  id                  Int           @id @default(autoincrement())
  companyId           Int
  company             Company       @relation(fields: [companyId], references: [id])
  interviewFlowId     Int
  interviewFlow       InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  title               String        @db.VarChar(255)
  statusId            Int
  status              Status        @relation(fields: [statusId], references: [id])
  isVisible           Boolean
  location            String        @db.VarChar(255)
  salaryMin           Float
  salaryMax           Float
  applicationDeadline DateTime?
  contactInfo         String        @db.VarChar(255)
  jobDetails          JobDetails?
  applications        Application[]

  @@index([companyId])
  @@index([interviewFlowId])
  @@index([statusId])
}

model JobDetails {
  id                 Int      @id @default(autoincrement())
  positionId         Int      @unique
  position           Position @relation(fields: [positionId], references: [id])
  description        String   @db.Text
  jobDescription     String   @db.Text
  requirements       String   @db.Text
  responsibilities   String   @db.Text
  benefits           String   @db.Text
  companyDescription String   @db.Text
}

model Status {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(100)
  positions    Position[]
  applications Application[]
}

model InterviewFlow {
  id             Int             @id @default(autoincrement())
  description    String          @db.VarChar(255)
  interviewSteps InterviewStep[]
  positions      Position[]
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewFlow   InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewTypeId Int
  interviewType   InterviewType @relation(fields: [interviewTypeId], references: [id])
  name            String        @db.VarChar(255)
  orderIndex      Int
  interviews      Interview[]
}

model InterviewType {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(100)
  description    String          @db.Text
  interviewSteps InterviewStep[]
}

model Application {
  id              Int         @id @default(autoincrement())
  positionId      Int
  position        Position    @relation(fields: [positionId], references: [id])
  personId        Int
  person          Person      @relation(fields: [personId], references: [id])
  applicationDate DateTime
  statusId        Int
  status          Status      @relation(fields: [statusId], references: [id])
  notes           String      @db.Text
  interviews      Interview[]

  @@index([positionId])
  @@index([personId])
  @@index([statusId])
  @@index([positionId, personId])
}

model Interview {
  id              Int           @id @default(autoincrement())
  applicationId   Int
  application     Application   @relation(fields: [applicationId], references: [id])
  interviewStepId Int
  interviewStep   InterviewStep @relation(fields: [interviewStepId], references: [id])
  personId        Int
  person          Person        @relation(fields: [personId], references: [id])
  interviewDate   DateTime
  result          String        @db.VarChar(255)
  score           Int
  notes           String        @db.Text

  @@index([applicationId])
  @@index([interviewStepId])
  @@index([personId])
}

model ContactInfo {
  id       Int    @id @default(autoincrement())
  personId Int    @unique
  person   Person @relation(fields: [personId], references: [id])
  phone    String @db.VarChar(15)
  address  String @db.VarChar(255)
  email    String @db.VarChar(255)
}

model Education {
  id          Int       @id @default(autoincrement())
  institution String    @db.VarChar(100)
  title       String    @db.VarChar(250)
  startDate   DateTime
  endDate     DateTime?
  personId    Int
  person      Person    @relation(fields: [personId], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  personId    Int
  person      Person    @relation(fields: [personId], references: [id])
}

model Resume {
  id         Int      @id @default(autoincrement())
  filePath   String   @db.VarChar(500)
  fileType   String   @db.VarChar(50)
  uploadDate DateTime
  personId   Int
  person     Person   @relation(fields: [personId], references: [id])
}
