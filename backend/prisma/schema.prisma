// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(100)
  employees       Employee[]
  positions       Position[]
  workExperiences WorkExperience[]
}

model Employee {
  id         Int         @id @default(autoincrement())
  companyId  Int
  name       String      @db.VarChar(100)
  email      String      @unique @db.VarChar(255)
  role       String      @db.VarChar(50)
  isActive   Boolean
  company    Company     @relation(fields: [companyId], references: [id])
  interviews Interview[]
}

model Position {
  id                   Int                @id @default(autoincrement())
  companyId            Int
  interviewFlowId      Int                @unique
  salaryRangeId        Int                @unique
  benefitId            Int                @unique
  companyDescriptionId Int                @unique
  title                String             @db.VarChar(100)
  description          String             @db.Text
  status               String             @db.VarChar(50)
  isVisible            Boolean
  location             String             @db.VarChar(100)
  jobDescription       String             @db.Text
  requirements         String             @db.Text
  responsibilities     String             @db.Text
  applicationDeadline  DateTime
  contactInfo          String             @db.VarChar(100)
  company              Company            @relation(fields: [companyId], references: [id])
  interviewFlow        InterviewFlow      @relation(fields: [interviewFlowId], references: [id])
  salaryRange          SalaryRange        @relation(fields: [salaryRangeId], references: [id])
  benefit              Benefit            @relation(fields: [benefitId], references: [id])
  companyDescription   CompanyDescription @relation(fields: [companyDescriptionId], references: [id])
  applications         Application[]

  @@index([status])
}

model SalaryRange {
  id             Int       @id @default(autoincrement())
  minSalary      Float
  maxSalary      Float
  employmentType String    @db.VarChar(50)
  position       Position?
}

model Benefit {
  id                 Int       @id @default(autoincrement())
  benefitDescription String    @db.Text
  position           Position?
}

model CompanyDescription {
  id          Int       @id @default(autoincrement())
  description String    @db.Text
  position    Position?
}

model InterviewFlow {
  id          Int             @id @default(autoincrement())
  description String          @db.Text
  position    Position?
  steps       InterviewStep[]
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int           @unique
  name            String        @db.VarChar(100)
  orderIndex      Int
  interviewFlow   InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewType   InterviewType @relation(fields: [interviewTypeId], references: [id])
  interviews      Interview[]
}

model InterviewType {
  id          Int            @id @default(autoincrement())
  name        String         @db.VarChar(100)
  description String         @db.Text
  steps       InterviewStep?
}

model Candidate {
  id              Int              @id @default(autoincrement())
  firstName       String           @db.VarChar(100)
  lastName        String           @db.VarChar(100)
  email           String           @unique @db.VarChar(255)
  phone           String?          @db.VarChar(15)
  address         String?          @db.VarChar(100)
  educations      Education[]
  workExperiences WorkExperience[]
  resumes         Resume[]
  applications    Application[]
}

model Education {
  id          Int       @id @default(autoincrement())
  institution String    @db.VarChar(100)
  title       String    @db.VarChar(250)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  companyName String?   @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  companyId   Int?
  company     Company?  @relation(fields: [companyId], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Application {
  id              Int         @id @default(autoincrement())
  positionId      Int
  candidateId     Int
  applicationDate DateTime
  status          String      @db.VarChar(50)
  notes           String      @db.Text
  position        Position    @relation(fields: [positionId], references: [id])
  candidate       Candidate   @relation(fields: [candidateId], references: [id])
  interviews      Interview[]

  @@index([status])
}

model Interview {
  id              Int           @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate   DateTime
  result          String        @db.VarChar(50)
  score           Int
  notes           String        @db.Text
  application     Application   @relation(fields: [applicationId], references: [id])
  interviewStep   InterviewStep @relation(fields: [interviewStepId], references: [id])
  employee        Employee      @relation(fields: [employeeId], references: [id])
}
