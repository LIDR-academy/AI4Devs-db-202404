// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id              Int              @id @default(autoincrement())
  firstName       String           @db.VarChar(100)
  lastName        String           @db.VarChar(100)
  email           String           @unique @db.VarChar(255)
  phone           String           @db.VarChar(15)
  address         String           @db.VarChar(100)
  educations      Education[]
  workExperiences WorkExperience[]
  resumes         Resume[]
  applications    Application[]

  @@index([lastName, firstName]) // Index for quick search by name
}

model Education {
  id          Int       @id @default(autoincrement())
  institution String    @db.VarChar(100)
  title       String    @db.VarChar(250)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId]) // Index for quick lookup by candidate
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String    @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId]) // Index for quick lookup by candidate
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId]) // Index for quick lookup by candidate
}

model Company {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(100)
  employees Employee[]
  positions Position[]

  @@index([name]) // Index for quick search by company name
}

model Employee {
  id         Int         @id @default(autoincrement())
  companyId  Int
  name       String      @db.VarChar(100)
  email      String      @db.VarChar(255)
  role       String      @db.VarChar(100)
  isActive   Boolean
  company    Company     @relation(fields: [companyId], references: [id])
  interviews Interview[]

  @@index([companyId]) // Index for quick lookup by company
}

model Position {
  id                  Int           @id @default(autoincrement())
  companyId           Int
  interviewFlowId     Int           @unique
  title               String        @db.VarChar(100)
  description         String        @db.VarChar(500)
  status              String        @db.VarChar(100)
  isVisible           Boolean
  location            String        @db.VarChar(100)
  jobDescription      String        @db.VarChar(500)
  requirements        String        @db.VarChar(500)
  responsibilities    String        @db.VarChar(500)
  salaryMin           Int
  salaryMax           Int
  employmentType      String        @db.VarChar(100)
  benefits            String        @db.VarChar(500)
  companyDescription  String        @db.VarChar(500)
  applicationDeadline DateTime
  contactInfo         String        @db.VarChar(100)
  company             Company       @relation(fields: [companyId], references: [id])
  interviewFlow       InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  applications        Application[]

  @@index([companyId]) // Index for quick lookup by company
  @@index([title, status]) // Index for quick search by title and status
}

model InterviewFlow {
  id             Int             @id @default(autoincrement())
  description    String          @db.VarChar(500)
  interviewSteps InterviewStep[]
  Position       Position?
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String        @db.VarChar(100)
  orderIndex      Int
  interviewFlow   InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewType   InterviewType @relation(fields: [interviewTypeId], references: [id])
  interviews      Interview[]

  @@index([interviewFlowId]) // Index for quick lookup by interview flow
  @@index([interviewTypeId]) // Index for quick lookup by interview type
}

model InterviewType {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(100)
  description    String          @db.VarChar(500)
  interviewSteps InterviewStep[]

  @@index([name]) // Index for quick search by name
}

model Application {
  id              Int         @id @default(autoincrement())
  positionId      Int
  candidateId     Int
  applicationDate DateTime
  status          String      @db.VarChar(100)
  notes           String      @db.VarChar(500)
  position        Position    @relation(fields: [positionId], references: [id])
  candidate       Candidate   @relation(fields: [candidateId], references: [id])
  interviews      Interview[]

  @@index([positionId]) // Index for quick lookup by position
  @@index([candidateId]) // Index for quick lookup by candidate
  @@index([applicationDate]) // Index for quick search by application date
}

model Interview {
  id              Int           @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate   DateTime
  result          String        @db.VarChar(100)
  score           Float
  notes           String        @db.VarChar(500)
  application     Application   @relation(fields: [applicationId], references: [id])
  interviewStep   InterviewStep @relation(fields: [interviewStepId], references: [id])
  employee        Employee      @relation(fields: [employeeId], references: [id])

  @@index([applicationId]) // Index for quick lookup by application
  @@index([interviewStepId]) // Index for quick lookup by interview step
  @@index([employeeId]) // Index for quick lookup by employee
  @@index([interviewDate]) // Index for quick search by interview date
}
