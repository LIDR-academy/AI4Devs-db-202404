// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  applications      Application[]
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  @@index([candidateId])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  @@index([candidateId])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Company {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  employees   Employee[]
  positions   Position[]
}

model Employee {
  id          Int         @id @default(autoincrement())
  companyId   Int
  company     Company     @relation(fields: [companyId], references: [id])
  name        String      @db.VarChar(255)
  email       String      @db.VarChar(255)
  role        String      @db.VarChar(255)
  isActive    Boolean
  interviews  Interview[]
}

model Position {
  id                  Int             @id @default(autoincrement())
  companyId           Int
  company             Company         @relation(fields: [companyId], references: [id])
  interviewFlowId     Int             @unique
  interviewFlow       InterviewFlow   @relation(fields: [interviewFlowId], references: [id])
  title               String          @db.VarChar(255)
  description         String          @db.Text
  status              String          @db.VarChar(100)
  isVisible           Boolean
  location            String          @db.VarChar(255)
  jobDescription      String          @db.Text
  requirements        String          @db.Text
  responsibilities    String          @db.Text
  salaryMin           Float
  salaryMax           Float
  employmentType      String          @db.VarChar(100)
  benefits            String          @db.Text
  companyDescription  String          @db.Text
  applicationDeadline DateTime
  contactInfo         String          @db.VarChar(255)
  applications        Application[]
  @@index([companyId])
}

model InterviewFlow {
  id              Int             @id @default(autoincrement())
  description     String          @db.VarChar(255)
  interviewSteps  InterviewStep[]
  position        Position?       
}

model InterviewStep {
  id                Int             @id @default(autoincrement())
  interviewFlowId   Int
  interviewFlow     InterviewFlow   @relation(fields: [interviewFlowId], references: [id])
  interviewTypeId   Int
  interviewType     InterviewType   @relation(fields: [interviewTypeId], references: [id])
  name              String          @db.VarChar(255)
  orderIndex        Int
  interviews        Interview[]
}

model InterviewType {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255)
  description String          @db.Text
  interviewSteps InterviewStep[]
}

model Application {
  id              Int         @id @default(autoincrement())
  positionId      Int
  position        Position    @relation(fields: [positionId], references: [id])
  candidateId     Int
  candidate       Candidate   @relation(fields: [candidateId], references: [id])
  applicationDate DateTime
  status          String      @db.VarChar(100)
  notes           String      @db.Text
  interviews      Interview[]
  @@index([positionId])
}

model Interview {
  id                Int         @id @default(autoincrement())
  applicationId     Int
  application       Application @relation(fields: [applicationId], references: [id])
  interviewStepId   Int
  interviewStep     InterviewStep @relation(fields: [interviewStepId], references: [id])
  employeeId        Int
  employee          Employee    @relation(fields: [employeeId], references: [id])
  interviewDate     DateTime
  result            String      @db.VarChar(255)
  score             Int
  notes             String      @db.Text
}
